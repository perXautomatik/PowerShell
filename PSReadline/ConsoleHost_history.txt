 (import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7).information | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"$mbxs = Get-Mailbox
 tree /f
$dirs = gci "G:\mhk" -directory -recurse | Where { (gci $_.fullName).count -eq 0 } | select -expandproperty FullName
 Get-Content -Path .\filerAttFlytta.txt | get-item -pv pathString | Copy-Item -Destination (new-item -type directory -force (Split-Path -path $pathString))
Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
get-printer | where-object {$_.name -like '*2339*'} |format-list -property name,drivername,portname | out-host
(Get-CimInstance -ClassName Win32_Product | Where-Object Name -Like "*acrobat reader*").InstallLocation
[psobject].Assembly.GetType(“System.Management.Automation.TypeAccelerators”)::get
Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar -h'
./cpdf.exe -pages 'C:\Users\crbk01\Desktop\ny mapp\Södra\MHN-2018-1680_322.pdf'
 .\pdfcombine "C:\Users\crbk01\Desktop\Ny mapp (2)" "C:\Users\crbk01\Desktop\Ny mapp (3)" C:\Users\crbk01\Desktop\new.pdf
$a = "MHN-2018-826_2_004.pdf" ; $b = "SeC_Man-Admin_ds_EN_USA_120109 (1).pdf" ; $out = 'out.pdf' ;  .\cpdf $a $b -o $out
in2csv w3.xlsx > w32.csv
Start-Process powershell -Verb runAs
$b = "H:\Users\crbk01\.DataGrip2019.1" ; $a = "C:\Users\crbk01\.DataGrip2019.1" ; cmd /c mklink /D "$b" "$a"
vivaldi "vivaldi://flags"
(Get-NetUDPEndpoint -LocalAddress local ).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
code --list-extensions > vsc-extensions.txt
git remote add PDF-Bookmark-Split https://github.com/perXautomatik/PDF-Bookmark-Split.git
git push --set-upstream PDF-Bookmark-Split master
(Get-PSReadlineOption).HistorySavePath                                                                                                                       
Get-PSReadLineKeyHandler                                                                                                                                     
Get-PSReadLineOption                                                                                                                                         
git restore --staged scripts
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Hardlink -Value "C:\Users\crbk01\AppData\Roaming\Microso...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Junction -Value "C:\Users\crbk01\AppData\Roaming\Microso...
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"  
git --bare
git init
ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
Stop-Process -Name vscode
takeown /F "C:\windows.old" /A /R /D Y
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' ?
.\regjump.exe HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics
git update-index --assume-unchanged
echo "open Ahk" ; menu @(everything 'regex:".*\\data\\[^\\]*.ahk"') | %{$_ | split-path -parent | cd ; . $_ }
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = out-string -InputObject (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' ) ; $output.replace('"','') > $path\filer.csv
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
cd 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\Pdf\TextFromPdf'
install-module -name '.\TextFromPdf.psd1'
import-module .\TextFromPdf.psd1
$src = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick\' ; Get-ChildItem -Path $src -Filter *.pdf -Recurse | ForEach-Object {  $ruleSet = @(     [pscustomobject]@{         Name       = "Total";         Expression = "(?i)MBNV-?";         Function   = {             return [regex]::Match($text, "MBNV.\d{4}.\d{3,4}").Value         }     } ); Get-TextFromPDF -Path $_.fullname -RuleSet $ruleSet | %{$new = $_.total+'.pdf'; $nextName = Join-Path -Path $src -ChildPath $new ;     while(Test-Path -Path $nextName)     {        $nextName = Join-Path $dest ($_.BaseName + "_$num" + $_.Extension)            $num+=1        }; $_ | Move-Item -Destination $nextName }}
(Get-Module functions).ExportedCommands.GetEnumerator() | %{ if($Host.UI.PromptForChoice('execute', $_.value.name,@('&Yes', '&No'),1)){ sleep 1}else{ [string]$functionName = $_.value.name.toString() ; "invoking" ; $q = invoke-command {&$functionname} ; $q } }
echo "mound vhd to path" ; Mount-VHD -Path "C:\Temp\Test.vhdx" -NoDriveLetter -Passthru | Get-Disk | Get-Partition | where { ($_ | Get-Volume) -ne $Null } | Add-PartitionAccessPath -AccessPath "C:\Temp\MountPoint\"
echo "info about junction target" ;  fsutil reparsepoint query 'D:\SteamV\steamapps\common'
Get-WindowsOptionalFeature -Online -FeatureName *hyper-v* | select DisplayName, FeatureName
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Management-PowerShell
$alreadyMounted = (Get-Volume | Get-DiskImage).ImagePath ; @(Get-ChildItem -path '\\100.84.7.151\NetBackup\VirtualDrive' -filter *vhdx ).fullname | ?{ $_ -notin $alreadyMounted } | %{ Mount-DiskImage $_ ; sleep 1 }
git ls-tree -r HEAD |`
%{ [pscustomobject]@{unkown=$_.substring(0,6);blob=$_.substring(7,4); hash=$_.substring(12,40);relativePath=$_.substring(53)} } |`
Group-Object -Property hash | ? { $_.count -ne 1 } |`
 %{ $_.group } | select @{name="h1";expression={$_.hash.substring(38)}}, relativepath 
Get-Command -FullyQualifiedModule 'functions' | ? { (get-verb).verb.ToLower() -notcontains [string](($_.name -split('-'))[0]).Tolower() }
explorer "$env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine"
$runHistPath = "$env:APPDATA\Everything\Run History.csv" ; get-content $runHistPath | ConvertFrom-Csv | ? { ($_.filename | Test-Path) } | convertTo-csv | Set-Content $runHistPath
ls -la
Get-History | Format-List -Property *Get-History | Format-List -Property *
Get-History | Format-List -Property *
echo "git Braches currentBranches as submodules" ; BranchToStream | %{ $x = $_.trim()	; git submodule add -b ($x) -- "https://github.com/perXautomatik/VisionH-ndelserToEasyRead.git" "$x" }
echo "git check git ignore on folder" ; ls | % {git check-ignore $_}
echo "git forget remove" ; git rm --cached -r "D:\PortableApps\PortableApps.com\Assets"
echo "git forgetIndex than ad ass subtree" ; git rm --cached -rf data ; git add -A ; git commit -am "removing data folder" ; git subtree add --prefix=data split master
echo "Git forgetMove Reste Don't think moving is deleting" ; git reset origin/master
echo "Git Head Re-Attach" ; git checkout -b temp-branch ; git checkout origin/9bf5f6bc-10c6-4831-8b5e-6c51fbeae781  ; git merge temp-branch -v
echo "git info root path"; git rev-parse --show-toplevel
echo "git paths Every commit"; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) | %{ gitSilently ; $_ }
echo "git paths Everything lazy push all repos on every harddrive" ; cd C:\ ; (EveryGitRepo | select-object -bottom 1 | sort-object -Property Length -Descending ) | %{gitSilently ;$q = [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -First 1 } ; $q | select path,line }
echo "git Remote path" ; ((git remote -v ) -split('[\s]')) | Where-Object { $_ -match 'https' } | unique
echo "Git remote Show origin"; git remote show origin
echo "git Remotes as psobject" ; ( out-null -InputObject ( git remote -v | Tee-Object -Variable proc ) ; %{$proc -split '\n'} | %{ $properties = $_ -split '[\t\s]'; New-Object PSObject -Property @{ name = $properties[0].Trim();  url = $properties[1].Trim();  type = $properties[2].Trim() } }  | select-object -first 1 | select url )
echo "Git silently do a command" ; Out-File -FilePath .\lazy.log -inputObject (git lazy 'AutoCommit' 2>&1 )
echo "git submodule absorbGitDir" ;git submodule absorbgitdirs
echo "import tab separated values" ; ConvertFrom-csv -Delimiter '`t'
echo "list 10 most commited ; commit push 10 most commited"
echo "List PowerShell's Environmental Variables" ; Get-Childitem -Path Env:* | Sort-Object Name
echo "open prolasso"; menu @(everything 'ext:exe lasso') | %{. $_ } | split-path -leaf | explorer
echo "open workspace office" ; menu @(everything 'path:ext:code-workspace !$ office') | %{. $env:code $_ -add 'Markagare_gronplan.xlsx'}
echo "open workspace xml" ; menu @(everything 'path:ext:code-workspace !$ xml') | %{. $env:code $_ -add 'C:\Users\crbk01\AppData\Local\Temp\TortoiseGit\BCFileFormats-2bc3a1de.002.xml'}
echo "parameters" ;  Get-Member -Parameter *
echo "ps info Added scripts"; Get-Command -CommandType externalscript
echo "ps info get-vers" ; $PSVersionTable
echo "ps info paths to Ps profiles" ; $PROFILE | Format-List -Force
echo "ps open gridview"; 'a,c' | Out-GridView -PassThru
echo "ps userProfilePath"; $env:USERPROFILE ; $PROFILE | Get-Member -Type NoteProperty
echo "RegexLookAhead content of file split " ; $x = '(?<=[.][^\s.]{3,10})\s' ; $y = 'D:\portapps\4, windows enhance\PortableApps\AutoHotkeyPortable\data\ToAdd.txt' ; (Get-Content -Raw  -path $y) -split $x
echo "search ConsolHistory" ;$path = aliasPshellHistoryPath; menu @( get-content $path | where{ $_ -match 'lepton' }) | %{Invoke-Expression $_ }
echo "split file by linenr" ; $InputFilename = Get-Content '.\gron.csv' ; $OutputFilenamePattern = 'output_done_'; $LineLimit = 60 ; $line = 0;$i = 0;$file = 0;$start = 0;while ($line -le $InputFilename.Length) { if ($i -eq $LineLimit -Or $line -eq $InputFilename.Length) {;        $file++;        $Filename = "$OutputFilenamePattern$file.csv";        $InputFilename[$start..($line - 1)] | Out-File $Filename -Force;        $start = $line;;        $i = 0;        Write-Host "$Filename";    };   $i++;;    $line++;};;
echo "tortoisegitproc" ; &"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"
echo "Update Lazy status every gits" ; cd C:\ ; (EveryGitRepo | sort-object -Property Length -Descending  ) |%{ cd $_ ; [psCustomObject] @{path = $_ ; line=Get-Content lazy.log -first 1 ; remote = gitSingleRemote } }| select path,remote,line | convertTo-csv > "C:\Users\crbk01\Desktop\Status.csv"
echo "Vscode Workspace and add file" ; $x='\n' ; $q =(out-string -InputObject(everything 'path:ext:code-workspace !$ ahk')) -split $x ; convert-path $q[0].trim() | convert-path | %{. $env:code $_ --add 'D:\PortableApps\4. windows enh\PortableApps\AHK\Data\.gitmodules.~'}
echo "bsarch fallout 4, vortex, modding" ; ."c:\modding\fallout4\fallout4\tools\bsarch\bsarch.exe" pack meshes "no sleeves no shirts - meshes.bsa" -z -fnv -share -mt
echo "combine according to runconfig" ; [xml]$xml=get-content "d:\users\crbk01\appdata\roaming\jetbrains\datagrip2021.1\projects\kvutsokning\.idea\runconfigurations\(fromlistofadresses)tillminamedelanden.run.xml"  -encoding utf8 ; $xml.component.configuration.'script-file' | %{$_.value -replace '[$]application_config_dir[$][/]', ('c:\users\crbk01\appdata\roaming\jetbrains\datagrip2021.1\' -replace '\\','/')} | %{"--:$_" ; get-content -path $_ -encoding utf8 ; "go" } >> 'c:/users/crbk01/appdata/roaming/jetbrains/datagrip2021.1/consoles/db/8b7c273a-baa2-4933-a5d5-4862e23c0af2/runconfig/combined.sql'                                                                                                        
echo "contentoffileas array" ; (get-content -raw  -path 'd:\portapps\4, windows enhance\portableapps\autohotkeyportable\data\toadd.txt') -split '(?<=sql)\s
echo "count occurence/unique of words in all files" ; $hash = @{} ; $regex="[^a-z0-9_-]" ; $a="" ; get-childitem | %{ get-content $_.name } | %{$a+=$_} ; $a -split $regex | %{ $_.tolower()} | %{$hash[$_]++} ;  $sorted= %{$hash.getenumerator() | sort-object {[int]$_.value}} ; $sorted | where{$_.name -notmatch "^\d+$"} | where{$_.name.length -gt 4 }                                                                                                                                                                                                                                                                                                                                                                       
echo "echo "file association" ; assoc .py=python.file
echo "get accelerators" ; [psobject].assembly.gettype(â€œsystem.management.automation.typeacceleratorsâ€)::get
echo "get header esp,esm" ; ((-join (gc .\formid.esp | select -first 3)) -replace "[^\w. ]{1,}","ã¥").split("ã¥") -match "^.*[.](esp|esm)$" | ?{(((-join (gc .\formid.esp | select -first 3)) -replace "[^\w. ]{1,}","ã¥").split("ã¥") -match "^.*[.](esp|esm)$" | select -first 13) -notcontains $_}                                                                                                                                                                                                                                                                                                                                                                                                                               
echo "get install location" ; get-wmiobject -class win32_product -filter 'name like "%adobe%"' | select caption,installlocation ; get-wmiobject -class win32_product -filter 'name like "%acrobat reader%"' | select caption,installlocation ; get-childitem hklm:\software\microsoft\windows\currentversion\uninstall | % { get-itemproperty $_.pspath } | select displayname,installlocation ; get-childitem hklm:\software\adobe | % { get-itemproperty $_.pspath } | select displayname,installlocation ; get-childitem hklm:\software\adobe\* | % { get-itemproperty $_.pspath } | select displayname,installlocation ; (get-ciminstance -classname win32_product | where-object name -like "*acrobat reader*").installlocation
echo "git .config submodule summary" ; git config --global status.submodulesummary true
echo "open everything search 1 ressult sorted" ; & 'c:\program files\everything\everything.exe' -search 'ext:ahk count:1' -sort "date modified" -sort-descending
echo "openasadmin" ; start-process powershell -verb runas
echo "reg get installocation" ; get-childitem hklm:\software\microsoft\windows\currentversion\uninsta ll | % { get-itemproperty $_.pspath } | select displayname,installlocation
echo "set encoding" ; $a = 'g:\sbf\livsmiljã¶\miljã¶- och hã¤lsoskydd\vatten\avlopp\klart vatten\information och utskick\utskick till fastighetsã¤gare\uppfã¶ljning\2021\fã¶rbud 2-21\tillvision21-lyckadeutskick-diarieupdelat\lyckat21.csv' ; (get-content -path $a) | set-content -encoding utf32 -path $a                                                                                                                                                                                                                                                                                                                                                                                                                       
echo "sort paths by lvl" ; search-everything -filter 'ext:psd1 \module' -global | sort {($_ -split '\\').count}, {$_} -descending | select-object -first 2 | %{test-modulemanifest $_ }
echo "start jar " ; start-process -filepath java -argumentlist '-jar pdfa-x.y.z.jar -h
echo "vscodeextensionsexport" ;  code --list-extensions > vsc-extensions.txt
echo "whatpulse aplictions" ; $ht2 = @{} ; $query = "select rightstr(path,instr(reverse(path),'/')-1) exe,path from (select max(path) path,max(cast(replace(version,'.','') as integer)) version from applications group by case when online_app_id = 0 then name else online_app_id end)" ; $path = "d:\portapps\4. windows check\portableapps\whatpulse\whatpulse.db" ; newsqliteconnection $path $query | out-string -stream | convertfrom-csv -delimiter `t  |  get-member                                                                                                                                                                                                                                                      
echo 'psobject to hasttable' ; $theObject.psobject.properties | Foreach { $ht2[$_.Name] = $_.Value }
get-module -list | format-table -property name, moduletype -autosize                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
invoke-webrequest -uri 'https://gist.githubusercontent.com/geoffreyplitt/43e251364182f12c8d7f/raw/393e8b659d666bcfc6ed566baa2edba6a4dd341f/convert_url_files_to_bookmarks.sh' -outfile convert_url_files_to_bookmarks.sh                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
echo "open Ahk" ; menu @(everything 'regex:"\\data\\[^\\]*.ahk$"') | %{ cd ($_ | split-path -parent) ; . $_ }
echo "list values in dict"; Get-Module -ListAvailable -Name PackageManagement | select ExportedCommands | %{ $_.exportedCommands.GetEnumerator()  }
$message = 'progress, added most common to top'; cd ($historypath | split-path -parent) ; git add . ; git commit -am $message
echo "deepsearch history" ; $a = ( everything 'commandLine ext:txt' | split-path -Parent | %{ $filter = '"'+$_+'" ext:txt;ps1'; everything $filter } | Resolve-Path | %{ Select-String -path $_ -Pattern '^.*HKL.*$' }) ; $a.Matches.value | Group-Object | select name
cinst siteshoter
cinst xml-notepad
cinst ntfslinksview --ignore-checksums
cinst initool
cinst fuse-nfs --ignore-checksums
cinst recycle --ignore-checksums
cinst textanalysistoolnet.portable --ignore-checksums
choco install jbang
choco install chunkfs
cinst testdisk
testdisk
executeThis 'testdisk'
echo "export git config"; git config --list --show-origin
Install-Package SharpShell
. 'D:\ToGit\PowerShell-Scripts\Scripts\TodoProjects\bytes\TodoDiablo2.ps1' ;  cd 'C:\Users\Användaren\Saved Games\Diablo II Resurrected\back'; Get-ChildItem -Exclude .d2x,.ma*,.key | select -first 309  | read-d2s | group name,lvl,characterclass,itemsSize | sort name,lcl -Descending
