 (import-csv .\1989-2010.csv -Delimiter ";" -Encoding UTF7).information | out-file -filepath "C:\Users\crbk01\Desktop\anteckningar w3\test.txt"$mbxs = Get-Mailbox
 tree /f
$dirs = gci "G:\mhk" -directory -recurse | Where { (gci $_.fullName).count -eq 0 } | select -expandproperty FullName
 Get-Content -Path .\filerAttFlytta.txt | get-item -pv pathString | Copy-Item -Destination (new-item -type directory -force (Split-Path -path $pathString))
Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
get-printer | where-object {$_.name -like '*2339*'} |format-list -property name,drivername,portname | out-host
(Get-CimInstance -ClassName Win32_Product | Where-Object Name -Like "*acrobat reader*").InstallLocation
[psobject].Assembly.GetType(“System.Management.Automation.TypeAccelerators”)::get
Start-Process -FilePath java -ArgumentList '-jar pdfa-x.y.z.jar -h'
./cpdf.exe -pages 'C:\Users\crbk01\Desktop\ny mapp\Södra\MHN-2018-1680_322.pdf'
 .\pdfcombine "C:\Users\crbk01\Desktop\Ny mapp (2)" "C:\Users\crbk01\Desktop\Ny mapp (3)" C:\Users\crbk01\Desktop\new.pdf
$a = "MHN-2018-826_2_004.pdf" ; $b = "SeC_Man-Admin_ds_EN_USA_120109 (1).pdf" ; $out = 'out.pdf' ;  .\cpdf $a $b -o $out
in2csv w3.xlsx > w32.csv
Start-Process powershell -Verb runAs
$b = "H:\Users\crbk01\.DataGrip2019.1" ; $a = "C:\Users\crbk01\.DataGrip2019.1" ; cmd /c mklink /D "$b" "$a"
vivaldi "vivaldi://flags"
(Get-NetUDPEndpoint -LocalAddress local ).localPort | %{[int]$_} | %{Get-Process -Id (Get-NetTCPConnection -LocalPort $_).OwningProcess}
code --list-extensions > vsc-extensions.txt
git remote add PDF-Bookmark-Split https://github.com/perXautomatik/PDF-Bookmark-Split.git
git push --set-upstream PDF-Bookmark-Split master
(Get-PSReadlineOption).HistorySavePath                                                                                                                       
Get-PSReadLineKeyHandler                                                                                                                                     
Get-PSReadLineOption                                                                                                                                         
git restore --staged scripts
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Hardlink -Value "C:\Users\crbk01\AppData\Roaming\Microso...
New-Item -Path "C:\Users\crbk01\OneDrive - Region Gotland\WindowsPowerShell\PSReadline" -ItemType Junction -Value "C:\Users\crbk01\AppData\Roaming\Microso...
&"C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe" /command:repostatus /path:"C:\Users\crbk01\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine"  
git --bare
git init
ls | Where-Object { $_.Name -notin 'PortableApps.com' }  | %{ git init $_ }
Stop-Process -Name vscode
takeown /F "C:\windows.old" /A /R /D Y
cat 'D:\OneDrive\TabSessionManager - Backup\EdgeBookmarksFile\bookmarks' | .\fx-win.exe 'this.roots' 'this.bookmark_bar' 'this.children[0]' ?
.\regjump.exe HKEY_CURRENT_USER\Control Panel\Desktop\WindowMetrics
git update-index --assume-unchanged
echo "open Ahk" ; menu @(everything 'regex:".*\\data\\[^\\]*.ahk"') | %{$_ | split-path -parent | cd ; . $_ }
$path = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\Information och utskick\Utskick till fastighetsägare\Påminnelse\2022\tillUtskick' ; $output = out-string -InputObject (Get-ChildItem -path $path | select -Property basename,name | ConvertTo-Csv -NoTypeInformation -Delimiter ';' ) ; $output.replace('"','') > $path\filer.csv
cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+'='+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
echo "update local git config by global" ; cd 'D:\Users\crbk01\.DataGrip2019.3\projects\Solen-Visoin-Vyer\.git\config';  $string = out-string -InputObject (git config --list --show-origin) ; $res = $string -split '\n' ; $regex = '\t'; $res | %{ $q = $_ -split '\t',2; $z = ($q[1] -split '=',2 ) ; [PSCustomObject]@{path = $q[0]; keyx = $z[0] ; valuex = $z[1].trim() } } | %{ $_.keyx+' '+"'"+$_.valuex+"'" } | %{Invoke-Expression "git config --local $_" }
cd 'C:\Users\crbk01\Documents\PowerShell\Modules\Personal\Pdf\TextFromPdf'
install-module -name '.\TextFromPdf.psd1'
import-module .\TextFromPdf.psd1
$src = 'G:\sbf\Livsmiljö\Miljö- och hälsoskydd\Vatten\Avlopp\Klart Vatten\E-meddelande\Påminnelse-12-mån-2020\Utskick\' ; Get-ChildItem -Path $src -Filter *.pdf -Recurse | ForEach-Object {  $ruleSet = @(     [pscustomobject]@{         Name       = "Total";         Expression = "(?i)MBNV-?";         Function   = {             return [regex]::Match($text, "MBNV.\d{4}.\d{3,4}").Value         }     } ); Get-TextFromPDF -Path $_.fullname -RuleSet $ruleSet | %{$new = $_.total+'.pdf'; $nextName = Join-Path -Path $src -ChildPath $new ;     while(Test-Path -Path $nextName)     {        $nextName = Join-Path $dest ($_.BaseName + "_$num" + $_.Extension)            $num+=1        }; $_ | Move-Item -Destination $nextName }}
(Get-Module functions).ExportedCommands.GetEnumerator() | %{ if($Host.UI.PromptForChoice('execute', $_.value.name,@('&Yes', '&No'),1)){ sleep 1}else{ [string]$functionName = $_.value.name.toString() ; "invoking" ; $q = invoke-command {&$functionname} ; $q } }
echo "mound vhd to path" ; Mount-VHD -Path "C:\Temp\Test.vhdx" -NoDriveLetter -Passthru | Get-Disk | Get-Partition | where { ($_ | Get-Volume) -ne $Null } | Add-PartitionAccessPath -AccessPath "C:\Temp\MountPoint\"
